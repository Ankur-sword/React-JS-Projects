1. What is Emmet?
->  Emmet is a built-in feature in Visual Studio. You don't have to install any extension for Emmet support. Emmet prevents you from writing the entire code by yourself by providing Emmet abbreviations. Emmet is enabled by default in HTML, sass, JSX, XML, less, and stylus file and also in languages that inherit from any of the above like handlebars and PHP.
	
2. Difference between a library and framework ?
-> Library : A library is a collection of pre-written code that can be used to perform common task or specific      functionality  to a program. It is often written in particular programming language that can be reusable so developer don’t have to write code to perform a specific function because library already contains the code for the specific function.
	
3. What is CDN ? Why do we use it ?
->  CDN  stands for Content Delivery Network or Content Distribution Network that helps to load the heavy application faster. When user visits web site, data from the web server has to travel to the internet to reach to user's computer. If the user is located far from the server then it then it will take a long time to load large files such as videos, image. Instead the website content is stored on CDN Servers geographically closer to the users and reaches their computer faster.
Content delivery networks (CDNs) provide many benefits that improve website performance and support core network infrastructure. For example, a CDN can do the following tasks:
○ Reduce page load time - Website traffic can decrease if your page load times are too slow. A CDN can reduce bounce rates and increase the time users spend on your site.
	
○  Reduce bandwidth costs - Bandwidth costs are a significant expense because every incoming website request consumes network bandwidth. Through caching and other optimizations, CDNs can reduce the amount of data an origin server must provide, reducing the costs of hosting for website owners.
	
○  Increase content availability - Too many visitors at one time or network hardware failures can cause a website to crash. CDN services can handle more web traffic and reduce the load on web servers. Also, if one or more CDN servers go offline, other operational servers can replace them to ensure uninterrupted service.
	
○ Improve website security - Distributed denial-of-service (DDoS) attacks attempt to take down applications by sending large amounts of fake traffic to the website. CDNs can handle such traffic spikes by distributing the load between several intermediary servers, reducing the impact on the origin server.
	
	
4. Why is React known as React ?
->  React is called "React" because of its core feature, which is its ability to "react" or respond dynamically to changes in react. React was originally created by Facebook  for use in their web applications, and it was released as an open-source project in 2013.
	
5. What is the difference between React and ReactDOM ?
->   React : 
○ React is a JavaScript library for building user interfaces. It allows developers to create reusable UI components and manage the state of those components efficiently.
React provides the core functionality for building components, managing their state, and handling updates to the user interface.
○ It uses a virtual DOM (Document Object Model) to optimize updates to the actual DOM, making UI updates more efficient and performant.
	    
ReactDOM :
○ ReactDOM is a specific package within the React ecosystem that is responsible for rendering React components into the browser's DOM (Document Object Model).
○ It provides the necessary methods for rendering React elements and components into HTML elements on a web page.
○ ReactDOM is primarily used in web applications to take the virtual DOM generated by React and update the real DOM, which is what the user sees and interacts with.
In summary, React is the core library for building user interfaces in a declarative and component-based way, while ReactDOM is a package that handles the rendering of those React components to the browser's DOM. When building web applications with React, you typically import both React and ReactDOM, but in other environments (e.g., React Native for mobile development), you may use different rendering libraries suited for the platform.

6. What is he difference between react.development.js and react.production.js ?
-> react.development.js and react.production.js are two different versions of the React JavaScript library that serve different purposes in the development and production stages of a web application. Here are the main differences between them:
	
1. Code Size and Optimization :
	i. react.development.js :-  This version of React is larger in size and includes additional warning messages, error-checking, and development-oriented features. It is intended for use during development to help developers catch and debug issues more easily. The code is not optimized for production use, so it might be slower and consume more memory.
	ii. react.production.js: This version is smaller in size and optimized for production use. It removes the development-only warnings, checks, and debugging features, which results in a smaller bundle size and improved performance. It is intended for use in production environments where performance is critical.

2. Error Messages:
	i. react.development.js : -  Provides more informative error messages and warnings, making it easier for developers to identify and fix issues during development.
	ii. react.production.js: Offers minimal error messages and warnings, which are typically less detailed and user-friendly compared to the development version. This is done to reduce the bundle size and improve performance in production.

3. Performance:
	i. react.development.js : -  Might have reduced performance due to the additional development-related code and checks.
	ii. react.production.js: Is optimized for better runtime performance and reduced memory usage in a production environment.
		
4. Debugging:
	i. react.development.js :- Includes tools and features that facilitate debugging, such as helpful error messages and the ability to inspect React component hierarchies.
	ii. react.production.js :-  Is not designed for debugging and should not be used in development environments for debugging purposes.
In practice, during development, you typically use react.development.js to aid in debugging and catch issues early. When deploying your application to a production environment, you switch to using react.production.js to minimize bundle size and optimize performance.
	
You can configure your build tools, such as Webpack or Create React App, to automatically switch between these two versions based on the environment (development or production) to simplify your development workflow and ensure that the appropriate version is used in each context.
	
7. What is cross-origin in the script tag ?
-> It stands for cross-origin resource sharing. The purpose of cross-origin attribute is used to share the resource from one domain to another domain. Basically, it is used to handle the CORS request that checks whether it is safe to allow for sharing the resource from other domains. The resource may include Audio, Video, Images, Link or external scripts  that specifies whether to support cross-origin or not. The attributes contains two values.
	 1. anonymous - It has a default value. It defines a CORS request which will be sent  without passing the credential information.
          2. use-credentials - A cross-origin request will be sent with credentials, cookies, and      certificate.
	
8. What are async and defer ?
->Async and defer are boolean attributes which is used along with script tag to load the external scripts efficiently in our web page.When we load the web page there are two major things happening in your browser 
		1. HTML Parsing
		2. Loading Of the scripts
			i. Loading of scripts does 2 parts first i.e. Fetching script from network
			ii. Actually executing the script
			
Without using async and defer in script - Suppose if browser is parsing the html line by line and suddenly at one point it sees the script tag then it stop or pause the html parsing and it started fetching script from the network and then and there it started executing the script and once execution is finished html parsing get resumed.
	
Async -  Suppose if browser is parsing the html, line by line along with that it also fetches the script from the network asynchronously  as soon as the scripts are fetched and available in browser, the html parsing get stopped and browser start the execution of scripts then and there only and once the execution get stopeed then html parsing started as regular.
	
	Note : - We should not use async when we are using multiple script that is dependent on each other because it doesn't guarantee the order of execution that might break our code. AT that time we should use differ because it maintains the execution of code
	
Defer - Suppose if browser is parsing the html along with that it fetch the script from the network asynchronously and script are fetched and available in browser and also completes the html parsing then it start the script execution.
	


